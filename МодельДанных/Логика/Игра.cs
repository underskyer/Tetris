using System;
using System.Linq;
using System.Threading;
using Тетрис.МодельДанных.Интерфейсы;
using Тетрис.МодельДанных.Модели;

namespace Тетрис.МодельДанных.Логика
{
	class Игра : IИгра
	{
		void IИгра.Старт(CancellationToken cancellationToken)
		{
			ИгровоеПоле.Очистить();
			СтатистикаИгры.Сбросить();

			while (true)
			{
				var удалосьСоздать = СоздатьНовуюФигуру();
				if (!удалосьСоздать)
					return;
				СтатистикаИгры.СледующийХод();
				СтатистикаИгры.УстановитьСкорость(РегуляторСкорости.Рассчитать(СтатистикаИгры));

				do
				{
					ОжиданиеСледующегоХода();
					if (cancellationToken.IsCancellationRequested)
						return;
				} while (ОпуститьФигуруВниз());

				lock (SyncRoot)
				{
					Фигура = null;
					var редуцированныеРяды = ИгровоеПоле.РедуцироватьФундамент();
					var добавочныеОчки = НачислительОчков.Рассчитать(редуцированныеРяды);
					СтатистикаИгры.ДобавитьОчки(добавочныеОчки);
				}
			}
		}
		void IИгра.ФигуруВлево() => ФигуруСдвинуть(-1);
		void IИгра.ФигуруВправо() => ФигуруСдвинуть(+1);
		void IИгра.ФигуруПовернуть()
		{
			if (Фигура == null)
				return;
			lock (SyncRoot)
			{

				var повёрнутаяФигура = Фигура.Повернуть();
				var фигураСдвинутаяВлево = повёрнутаяФигура.СдвинутьВлево();
				var фигураСдвинутаяВправо = повёрнутаяФигура.СдвинутьВправо();
				var фигураСдвинутаяВниз = повёрнутаяФигура.СдвинутьВниз();
				var фигураСдвинутаяВниз2 = фигураСдвинутаяВниз.СдвинутьВниз();
				var возможныеФигуры = new[]
				{
					повёрнутаяФигура,
					фигураСдвинутаяВлево,
					фигураСдвинутаяВправо,
					фигураСдвинутаяВниз,
					фигураСдвинутаяВниз2,
				};
				возможныеФигуры.FirstOrDefault(фигура => ФигуруСменить(фигура));
			}
		}
		void IИгра.ФигуруСбросить()
		{
			lock (SyncRoot)
			{
				while (ФигуруСменить(Фигура?.СдвинутьВниз())) ;
			}
		}
		IИгровоеПоле IИгра.ИгровоеПоле => ИгровоеПоле;
		IСтатистикаИгры IИгра.СтатистикаИгры => СтатистикаИгры;

		Фигура Фигура { get; set; }
		ИгровоеПоле ИгровоеПоле { get; }

		readonly IГенераторФигур ГенераторФигур;
		readonly IНачислительОчков НачислительОчков;
		readonly IРегуляторСкорости РегуляторСкорости;
		readonly СтатистикаИгры СтатистикаИгры = new СтатистикаИгры();
		readonly object SyncRoot = new object();

		public Игра(ИгровоеПоле игровоеПоле, IГенераторФигур генераторФигур, IНачислительОчков начислительОчков, IРегуляторСкорости регуляторСкорости)
		{
			ИгровоеПоле = игровоеПоле ?? throw new ArgumentNullException(nameof(игровоеПоле));
			ГенераторФигур = генераторФигур ?? throw new ArgumentNullException(nameof(генераторФигур));
			НачислительОчков = начислительОчков ?? throw new ArgumentNullException(nameof(начислительОчков));
			РегуляторСкорости = регуляторСкорости ?? throw new ArgumentNullException(nameof(регуляторСкорости));
		}

		bool СоздатьНовуюФигуру()
		{
			lock (SyncRoot)
			{
				Фигура = ГенераторФигур.Получить(ИгровоеПоле.НачальнаяПозицияФигуры);
				while (!ИгровоеПоле.Содержит(Фигура))
					Фигура = Фигура.СдвинутьВниз();
				ИгровоеПоле.Добавить(Фигура);
				return ИгровоеПоле.ПроверитьСостояние();
			}
		}
		void ОжиданиеСледующегоХода() => Thread.Sleep(60000 / СтатистикаИгры.ХодыВМинуту);
		bool ОпуститьФигуруВниз()
		{
			lock (SyncRoot)
			{
				var смещённаяФигура = Фигура.СдвинутьВниз();
				var успех = ИгровоеПоле.Содержит(смещённаяФигура);
				if (!успех)
					return false;

				успех = ИгровоеПоле.СменитьФигуру(Фигура, смещённаяФигура);
				if (успех)
					Фигура = смещённаяФигура;
				//#if DEBUG
				//				else
				//					System.Diagnostics.Debugger.Break();
				//#endif
				return успех;
			}
		}

		void ФигуруСдвинуть(int сдвиг)
		{
			lock (SyncRoot)
			{
				ФигуруСменить(Фигура?.СдвинутьВправо(сдвиг));
			}
		}

		bool ФигуруСменить(Фигура новаяФигура)
		{
			if (Фигура == null || !ИгровоеПоле.Содержит(новаяФигура))
				return false;

			var успешно = ИгровоеПоле.СменитьФигуру(Фигура, новаяФигура);
			if (успешно)
				Фигура = новаяФигура;
			return успешно;
		}
	}
}
