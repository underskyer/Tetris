using System;
using System.Collections.Generic;
using System.Linq;
using Тетрис.МодельДанных.Интерфейсы;
using Тетрис.МодельДанных.Модели;

namespace Тетрис.МодельДанных.Логика
{
	class ИгровоеПоле : IИгровоеПоле
	{
		public ИгровоеПоле(ПараметрыИгровогоПоля параметрыИгровогоПоля)
		{
			Вышина = параметрыИгровогоПоля.Вышина;
			Ширина = параметрыИгровогоПоля.Ширина;
			НачальнаяПозицияФигуры = new Позиция(Ширина / 2 - 1, 0);
			Ряды = new int[Вышина][];
			
			Очистить();
		}
		readonly LinkedList<int[]> КешированныйСписокДляРедукции = new LinkedList<int[]>();

		public event EventHandler ПолеИзменилось;
		public int Вышина { get; }
		public int Ширина { get; }
		int[][] Ряды { get; }

		public int РедуцироватьФундамент()
		{
			var редуцированныеРяды = 0;

			var связанныйСписокРядов = КешированныйСписокДляРедукции;
			связанныйСписокРядов.Clear();
			foreach (var ряд in Ряды)
				if (ряд.All(x => x == 1))
				{
					++редуцированныеРяды;
					for (int x = 0; x < Ширина; ++x)
						ряд[x] = 0;
					связанныйСписокРядов.AddFirst(ряд);
				}
				else
					связанныйСписокРядов.AddLast(ряд);

			var индекс = 0;
			foreach (var ряд in связанныйСписокРядов)
				Ряды[индекс++] = ряд;

			ПолеИзменилось?.Invoke(this, EventArgs.Empty);
			return редуцированныеРяды;
		}

		public void Очистить()
		{
			for (int y = 0; y < Ряды.Length; ++y)
				Ряды[y] = new int[Ширина];
			ПолеИзменилось?.Invoke(this, EventArgs.Empty);
		}

		IReadOnlyList<IReadOnlyList<int>> IИгровоеПоле.Ряды => Array.AsReadOnly(Ряды.Select(ряд => Array.AsReadOnly(ряд)).ToArray());

		public Позиция НачальнаяПозицияФигуры { get; }

		public bool ПроверитьСостояние() => Ряды.All(ряд => ряд.All(клетка => клетка == 0 || клетка == 1));
		readonly object SyncRoot = new object();
		public bool СменитьФигуру(Фигура стараяФигура, Фигура новаяФигура)
		{
			lock (SyncRoot)
			{
				МеняемФигуры(стараяФигура, новаяФигура);
				var успешно = ПроверитьСостояние();
				if (!успешно)
					МеняемФигуры(новаяФигура, стараяФигура);
				return успешно;
			}
		}
		void МеняемФигуры(Фигура стараяФигура, Фигура новаяФигура)
		{
			Вычесть(стараяФигура);
			Добавить(новаяФигура);
		}
		public ИгровоеПоле Добавить(Фигура фигура)
		{
			Учесть(фигура, ТипМодификации.Добавить);
			return this;
		}
		ИгровоеПоле Вычесть(Фигура фигура)
		{
			Учесть(фигура, ТипМодификации.Вычесть);
			return this;
		}

		void Учесть(Фигура фигура, ТипМодификации типМодификации)
		{
			if (фигура == null)
				return;
			var модификатор = (int)типМодификации;

			foreach (var точка in фигура.ПолучитьТочки())
				if (Cодержит(точка))
					Ряды[точка.Y][точка.X] += модификатор;

			ПолеИзменилось?.Invoke(this, EventArgs.Empty);
		}

		bool Cодержит(Позиция точка) =>
			точка.Y >= 0 &&
			точка.Y < Вышина &&
			точка.X >= 0 &&
			точка.X < Ширина;
		public bool Содержит(Фигура фигура) => фигура.ПолучитьТочки().All(Cодержит);
	}
}