using static System.Math;

namespace Тетрис.МодельДанных.Модели
{
	readonly struct УголПоворота
	{
		readonly int xx;
		readonly int xy;
		readonly int yx;
		readonly int yy;

		public int УголВГрадусах { get; }
		public static УголПоворота _0 { get; }
		public static УголПоворота _90 { get; }
		public static УголПоворота _180 { get; }
		public static УголПоворота _270 { get; }
		public УголПоворота ПротивЧасовой(int шаги = 1) => ПовернутьНа(+шаги * ШагПоворота);
		public УголПоворота ПоЧасовой(int шаги = 1) => ПротивЧасовой(-шаги);

		УголПоворота(int уголВГрадусах)
		{
			УголВГрадусах = уголВГрадусах;
			var уголВРадианах = УголВГрадусах * 2 * PI / ПолныйУгол;
			xx = +(int)Cos(уголВРадианах);
			xy = -(int)Sin(уголВРадианах);
			yx = -xy;
			yy = xx;
		}
		public Позиция Повернуть(Позиция позиция) => new Позиция(
			позиция.X * xx + позиция.Y * xy,
			позиция.X * yx + позиция.Y * yy);

		static УголПоворота()
		{
			_0 = new УголПоворота(0);
			_90 = _0.ПротивЧасовой();
			_180 = _90.ПротивЧасовой();
			_270 = _180.ПротивЧасовой();
		}

		public static readonly int ПолныйУгол = 360;
		public static readonly int ШагПоворота = 90;
		УголПоворота ПовернутьНа(int уголВГрадусах)
		{
			уголВГрадусах = ПолныйУгол + уголВГрадусах % ПолныйУгол; // TODO Надо проверить, что это корректно обрабатывает большие отрицательные углы
			return new УголПоворота((УголВГрадусах + уголВГрадусах) % ПолныйУгол);
		}

		public override bool Equals(object obj) => obj is УголПоворота угол && УголВГрадусах == угол.УголВГрадусах;
		public override int GetHashCode() => УголВГрадусах.GetHashCode();
		public static bool operator ==(УголПоворота угол1, УголПоворота угол2) => угол1.УголВГрадусах == угол2.УголВГрадусах;
		public static bool operator !=(УголПоворота угол1, УголПоворота угол2) => угол1.УголВГрадусах != угол2.УголВГрадусах;

		public override string ToString() => $"{УголВГрадусах}°";
	}
}
